---
import Layout from "../layouts/Layout.astro";
import PostCard from "../components/PostCard.astro";
import { supabase } from "../lib/supabase";
import SortMenu from "../components/SortMenu.astro";
import { getSchoolByID } from "../lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { User, ChevronLeft, ChevronRight } from "lucide-react";

// Constants for items per page
const ITEMS_PER_PAGE = {
  mobile: 6,
  tablet: 8,
  desktop: 12,
};

// Get URL parameters
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get("page") || "1");
const sortBy = url.searchParams.get("sort") || "date_desc";
const initialItemsPerPage = ITEMS_PER_PAGE.desktop;

// Calculate range for Supabase query
const from = (currentPage - 1) * initialItemsPerPage;
const to = from + initialItemsPerPage - 1;

// Build query based on sort parameter
let query = supabase
  .from("secrets")
  .select("*", { count: "exact" })
  .eq("approved", true)
  .range(from, to);

switch (sortBy) {
  case "date_desc":
    query = query.order("created_at", { ascending: false }).order("id", { ascending: false });
    break;
  case "date_asc":
    query = query.order("created_at", { ascending: true }).order("id", { ascending: false });
    break;
  case "id_desc":
    query = query.order("id", { ascending: false });
    break;
  case "id_asc":
    query = query.order("id", { ascending: true });
    break;
  default:
    query = query.order("created_at", { ascending: false }).order("id", { ascending: false });
    break;
}

// Execute queries in parallel
const [postsResult, schoolsResult] = await Promise.all([
  query,
  supabase.from("schools").select("*"),
]);
const schools = schoolsResult.data || [];
const posts = postsResult.data || [];
const totalPosts = postsResult.count || 0;
const totalPages = Math.ceil(totalPosts / initialItemsPerPage);

const error = postsResult.error || schoolsResult.error;

// Define sort options for the dropdown
const sortOptions = [
  { value: "date_desc", label: "Más reciente" },
  { value: "date_asc", label: "Más antiguo" },
];

// Helper function to generate pagination URL
const getPaginationUrl = (page: number, sort: string) => {
  const newUrl = new URL(Astro.url);
  newUrl.searchParams.set("page", page.toString());
  newUrl.searchParams.set("sort", sort);
  return newUrl.toString();
};
---

<Layout title="Secretos">
  <div class="container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="flex items-center gap-2 mb-6">
      <a
        href="/create"
        class={`${buttonVariants({ variant: "outline" })} flex-grow hover:bg-secondary transition-all duration-300 hover:scale-105`}
      >
        Nuevo post
      </a>
      <div class="relative z-10">
        <SortMenu currentSort={sortBy} options={sortOptions} />
      </div>
      <a
        href="/admin"
        class={`${buttonVariants({ variant: "outline" })} w-10 h-10 p-0 flex items-center justify-center hover:bg-secondary transition-all duration-300 hover:scale-105`}
        aria-label="Administración"
      >
        <User className="h-4 w-4" />
      </a>
    </div>

    <!-- Error Message -->
    {error && (
      <div class="bg-destructive/15 text-destructive p-4 rounded-md mb-6">
        <p>Error al cargar los secretos. Por favor, intenta de nuevo más tarde.</p>
      </div>
    )}

    <!-- Posts Grid -->
    {!error && (
      <div id="posts-container" class="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
        {posts.map((post) => {
          const school = getSchoolByID(post.school, schools);
          const schoolName = school
            ? school.nombre
                .replace(/\b(escuela|secundaria)\b/gi, "")
                .trim()
                .toLowerCase()
                .replace(/\b\w/g, (c) => c.toUpperCase())
            : "Escuela no encontrada";

          return (
            <div class="post-item">
              <PostCard
                id={post.id}
                content={post.content}
                school={schoolName}
                title={post.titulo}
                created_at={post.created_at}
              />
            </div>
          );
        })}
      </div>
    )}

    <!-- Pagination -->
    {totalPosts > 0 && (
      <div class="flex justify-center items-center mt-8 gap-4">
        <a
          href={currentPage > 1 ? getPaginationUrl(currentPage - 1, sortBy) : "#"}
          class={`${buttonVariants({ variant: "outline" })} flex items-center ${
            currentPage <= 1 ? "pointer-events-none opacity-50" : ""
          }`}
        >
          <ChevronLeft className="h-4 w-4 mr-2" />
          Anterior
        </a>
        <span class="text-sm text-muted-foreground">
          Página {currentPage} de {totalPages}
        </span>
        <a
          href={currentPage < totalPages ? getPaginationUrl(currentPage + 1, sortBy) : "#"}
          class={`${buttonVariants({ variant: "outline" })} flex items-center ${
            currentPage >= totalPages ? "pointer-events-none opacity-50" : ""
          }`}
        >
          Siguiente
          <ChevronRight className="h-4 w-4 ml-2" />
        </a>
      </div>
    )}

    <!-- No Posts Message -->
    {totalPosts === 0 && (
      <div class="text-center py-12">
        <p class="text-lg text-muted-foreground mb-4">Aún no hay secretos compartidos.</p>
        <a href="/create" class={`${buttonVariants({ variant: "outline" })} transition-all duration-300 hover:scale-105`}>
          ¡Sé el primero en compartir!
        </a>
      </div>
    )}
  </div>
</Layout>
